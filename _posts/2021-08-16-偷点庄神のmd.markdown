---
layout: article #必填
lang: zh #中文
pageview: true #阅读量统计
comment: true #开启评论
mathjax: true # 开启Mathjax 公式支持
mathjax_autoNumber: true # 该页的 Mathjax 公式开启自动编号
mermaid: true #开启 Mermaid 流程图支持
chart: true # 开启 Chart 图表支持
lightbox: true #开启大图点击预览
sharing: true #开启分享
show_author_profile: true #显示作者信息
show_subscribe: true #在文章末尾显示订阅信息
license: true #显示文章的许可协议

article_header:
  type: overlay
  theme: dark
  background_color: '#123' #当 type 为 overlay 时有效。当设置的背景色较深时，你需要设置 theme 为 dark。
  background_image: #当 type 为 overlay 时有效，设置为 false 可覆盖 cover 禁止背景图片。
  image: #当 type 为 cover 时有效。
  
title: "庄神の解题报告" #标题
date:  2021-08-16 17:00:32 +0800 #日期 必填
key: "A2021-08-16-17:00:32" #页面的唯一标识符，供评论系统和点击量统计使用。必须以字母（[A-Za-z]）开头，其后可以接若干字母、数字（[0-9]）、连字符（-）、下划线（_）、冒号（:）和小数点（.）。
author: 庄神 #作者
tags: ["庄神の解题报告"] #标签
---

### 1451 Div2

#### **1451A Subtract or Divide**

水题。一个数可以执行2种操作，减去1，或者除以它的因子。问$n$​到1需要最少几次操作。首先，偶数可以直接$n->2->1$​（2步），奇数可以$n->n-1->2->1$​（3步），注意特判$n\leq 3$​的时候，次数为$n-1$​​。

#### **1451B Non-Substring Subsequence**

水题。查询字符串$s$​的子串，问有没有一个不连续的子序列等于这个子串。只要看子串的第一个元素在前面有没有出现，或者子串的最后一个元素有没有在后面出现即可。用前缀和就可以解决。

#### **1451C String Equality**

也比较简单。问字符串$a$是否可以变成$b$。有两种操作可以执行：1) 交换$a_i$和$a_i+1$（其实就相当于数组$a$中所有元素可以任意交换）；2) 把连续$k$个相同元素$a_i,...,a_{i+k-1}$​的值+1，即当$k=2$，把$bb$变为$cc$，当元素是$zz$时不可再变。我的办法是把元素放到桶里，如果$numa_i$的数量比$numb_i$多，那么就可以把它多出来的$k*a$个移到少的桶里去。也就是遍历桶，找到$numa_i<numb_i$的桶时，去其他桶里凑，如果凑到最后还是少，就输出NO，遍历完，所有桶都不少的的时候就输出YES。

#### **1451D Circle Game**

https://codeforces.com/problemset/problem/1451/D



有一个棋盘，是一个半径为$d$的$\frac{1}{4}$圆，U和A可以轮流沿着$x$轴和$y$轴走$k$的长度，先走到棋盘之外的人就输了。U和A都采取最优策略，U先手。给定棋盘半径$d$和走棋的长度$k$，问谁会赢。



首先，在走棋时，由于圆的对称性，无论U怎么走，A都可以跟随到轴线上。当U走到某一步而A无法跟随时，U就赢了。即这两个点是否能走。



此时U处于$(kz,kz)$​，而A无法跟随到$(kz+1,kz)$​或$(kz,kz+1)$​，U赢。若找不到这样的$z$​，$s.t.$​ $z=max(z), (kz,kz) \in D, (kz+1,kz)\notin D, (kz,kz+1)\notin D $​，则A赢。

AC代码：

```c++
ll d, k;

void solve(){
	scanf("%lld%lld",&d,&k);
	ll x=0, y=0;
	while ((x+k)*(x+k)+(y+k)*(y+k)<=d*d){
		x += k;
		y += k;
	}
//	if ((x+k)*(x+k)+y*y <= d*d || x*x+(y+k)*(y+k)<=d*d){
	if ((x+k)*(x+k)+y*y <= d*d){ // 因为点是对称的所以第二个条件冗余
		printf("Ashish\n");
		return;
	}
	printf("Utkarsh\n");
}
```



### 1526 Div2

#### 1526A Mean Inequality

水题，假如$n=5$​，那么先排序，然后按照1 10 2 9 3 8 4 7 5 6那么排就可以了

#### 1526B I Hate 1111

把给定的数$x$，用11,111,1111,...,表示出来，每个11..都可以使用任意次。如果可以表示输出YES，否则输出NO。

首先，我们可以知道任何111...都是可以由11和111共同表示出来的。那么就是相当于求

$\exists a,b, \ s.t. \ a*11 + b*111 = x$

即$a*11 + b*(110+1)=x$​

$11*(a+10b)+b=x$

$\therefore$​​ $b=x\%11$​，只要检测$(x-111*b)\%11$​是否为0即可​。



#### 1526C1&C2 Potions

有一排药水从1到n，从第1个位置顺序喝药水，初始生命值为0。在过程中要一直保持生命值$\geq$0。求最大的药水数量。

在C1能采取的方法有：

**1） 简单的DP**

设$dp_{ik}$为在第$i$个位置，喝第$k$瓶药水，剩下的最大生命值。那么显然，答案就是在第$n$个位置时，使得$dp_{ik} \geq 0$的最大的$k$。那么状态转移方程为：

$$ dp_{ik} = \begin{cases}  dp_{i-1k}, &dp_{i-1k-1} + a_i < 0 \\ max(dp_{i-1k}, dp_{i-1k-1}+a_i), &otherwise\end{cases}$$

时间复杂度为$O(N^2)$​

AC代码：

```c++
int n;
const int Max_n = 2e3 + 10;
ll dp[Max_n][Max_n], a[Max_n];
void init() {
	memset(dp,-0x3f,sizeof(dp));
	for (int i=0; i<=n; ++i) {
		dp[i][0] = 0;
	}
}
void solve() {
	n = read();
	init();
	ll maxk = 0;
	for (int i=1; i<=n; ++i) {
		for (int k=1; k<=i; ++k) {
			dp[i][k] = dp[i-1][k];
			if (dp[i-1][k-1]+a[i] >= 0) {
				dp[i][k] = max(dp[i-1][k-1]+a[i], dp[i][k]);
			}
		}
	}
	for (int i=1; i<=n; ++i) {
		if (dp[n][i]>=0) {
			maxk++;
		}
	}
}
```



**2） 贪心+线段树**

我们以非递减的顺序迭代来喝药水，如果不会死，就把药水喝下去。

设$c_i=a_i+i*\sigma$​，$\sigma$是一个非常小的数，使得我们可以认为$c_i$​是彼此不相等的数。设$S$是最优解的集合，里面是所有的应该喝下去的位置。

若$i<j$且$c_i<c_j$，若$i \in S$且$j\notin S$，那么移走$i$，加入$j$得到的$S'$，一定不劣于原来的$S$。

现在，假设第$i$个位置的药水还没有被喝，假设找不到这样的$k$，使得$c_k<c_i$且$k \in S$。假设我们把$i$加入了$S$。如果我们又到了位置$j$（我们可能会死在$j$），$c_j<c_i$，我们将$j$从$S$中移除，然后加入$i$。如果我们无法抵达这样的$j$，我们的算法将不会选择$i$。当我们仅考虑$k$，$s.t.c_k<c_i$​的时候，就不会选$i$。

这些操作会花费$O(N^2)$的时间，使用一个range add range max lazy propagation 线段树，复杂度可以降到$O(NlogN)$​

emmm其实题解的解释我没怎么看懂，然后学长解释之后懂了。

这里有两点
1、如果能取小的，肯定比大的要好
2、如果不能取第x位置的那个小的，那么从x往前那些里面的大的一定没他好，只能再考虑x往后的，但是因为最坏情况我们仍要全考虑，所以可以不必剪枝，不过如果要冲排行榜，那可以剪一下
然后就会想如何判断在x位置能不能取这个负的，所以就可以上线段树了，当然树状数组其实就够了
首先我需要在每个正的位置往后的所有位置加上这个值，做好初始线段树
从绝对值小到大判断负数
如果能取，就从这个位置往后都减值
只需要这两个操作，综上，树状数组处理更方便

总之就是这样0.0

**3） 贪心+优先队列**

遇到药水就喝。要是死了就把当前损耗生命值最大的药水吐出来，直到不会死为止。

AC代码：

```c++
int n;
const int Max_n = 2e5 + 10;
ll a[Max_n];
priority_queue<ll, vector<ll>, greater<ll> > pq;

void solve(){
	n = read();
 ll suma = 0;
	for (int i=1;i<=n;++i){
		a[i] = read();
	}
	for (int i=1;i<=n;++i){
		suma += a[i];
		pq.push(a[i]);
		
		while (suma < 0){
			suma -= pq.top();
			pq.pop();
		}
	}
	printf("%d\n", pq.size());
}
```